#include <opencv2/opencv.hpp>
#include <opencv2/highgui.hpp>
#include <iostream>
#include <vector>
#include <algorithm>
#include <numeric>

// g++ `pkg-config --cflags opencv4` cv.cpp `pkg-config --libs opencv4`

using namespace std;
using namespace cv;

double angle(cv::Point pt1, cv::Point pt2, cv::Point pt0)
{
	double dx1 = pt1.x - pt0.x;
	double dy1 = pt1.y - pt0.y;
	double dx2 = pt2.x - pt0.x;
	double dy2 = pt2.y - pt0.y;
	return (dx1 * dx2 + dy1 * dy2) / sqrt((dx1 * dx1 + dy1 * dy1) * (dx2 * dx2 + dy2 * dy2) + 1e-10);
}
int main()
{   Mat SkanFrame;
    bool check=false;
	int canny_a = 80, canny_b = 150;
    int loRange[3] = {56, 88, 76};
	int hiRange[3] = {119, 255, 255};
	int dilation_size = 5;
		auto structElem = getStructuringElement(MORPH_ELLIPSE,
												Size(2 * dilation_size + 1, 2 * dilation_size + 1),
												Point(dilation_size, dilation_size));
	namedWindow("prostokaty", cv::WINDOW_AUTOSIZE);

    createTrackbar("A", "prostokaty", &canny_a, 255);
	createTrackbar("B", "prostokaty", &canny_b, 255);
	VideoCapture camera(0); // 0 - domyslna, 1 - podczerwien,
	while (waitKey(1) != 27)
	{

		Mat frame,frame0,frameBw,frameCanny,frameNegMask,frameMask;
		camera >> frame;
		//flip(frame, frame, 1);
        frame0 = frame.clone();
		imshow("frame_from_cam", frame);
		cvtColor(frame, frameBw, COLOR_BGR2GRAY);
		imshow("bw", frameBw);

        equalizeHist(frameBw,frameBw);
		
        imshow("bw-hist", frameBw);

        Canny(frameBw, frameCanny, canny_a, canny_b, 3);

        imshow("Canny Okno", frameCanny);

        static auto ellipse = getStructuringElement(MORPH_ELLIPSE, Size (5,5));
        morphologyEx(frameBw,frameBw,MORPH_CLOSE,ellipse);
        morphologyEx(frameBw,frameBw,MORPH_OPEN,ellipse);

        Canny(frameBw, frameCanny, canny_a, canny_b, 3);
        imshow("Canny Okno z morph", frameCanny);
         static auto ellipse_33 = getStructuringElement(MORPH_ELLIPSE, Size (3,3));
        morphologyEx(frameCanny,frameCanny,MORPH_DILATE,ellipse_33);  


        imshow("Canny Okno z morph DILATE", frameCanny);   

        vector<vector<Point>> contours;
         vector<vector<Point>> contours_4;
        findContours(frameCanny,contours,RETR_LIST, CHAIN_APPROX_SIMPLE);
        for(int i = 0;i < contours.size();i++){
            approxPolyDP(contours[i],contours[i],10,true);
            if(contours[i].size()==4){
                double amax = 0;
                for(int j=0;j<4;j++){
                    double a = fabs(angle(contours[i][j], contours[i][(j+1)%4],contours[i][(j+1)%4]));
                    amax = max(a,amax);
                     
                }
                if(amax < 0.4)
                contours_4.push_back(contours[i]);
                   
            }
            
            
        }
         for(int i = 0;i < contours_4.size();i++){
             //drawContours(frame, contours_4,i,Scalar(0,0,255));
         }
         if(contours_4.size() > 0){
             sort(contours_4.begin(), contours_4.end(),
				 [](auto &a, auto &b) {
					 return contourArea(a, false) > contourArea(b, false);
				 });
                  drawContours(frame, contours_4,0,Scalar(255,0,0));
            Mat dstMat(Size(600, 800), CV_8UC3);
			vector<Point2f> src = {{0, 0}, {dstMat.cols, 0}, {dstMat.cols, dstMat.rows}, {0, dstMat.rows}};
			vector<Point2f> dst;
			for (auto p : contours_4[0])
				dst.push_back(Point2f(p.x, p.y));
			auto wrap_mtx = getPerspectiveTransform(dst, src);
			warpPerspective(frame0, dstMat, wrap_mtx, Size(dstMat.cols, dstMat.rows));

			

            cvtColor(dstMat, frameMask, cv::COLOR_BGR2HSV);    
            inRange(frameMask, Scalar(loRange[0], loRange[1], loRange[2]),
				Scalar(hiRange[0], hiRange[1], hiRange[2]), frameNegMask);
            	morphologyEx(frameNegMask, frameNegMask, MORPH_CLOSE, structElem);
		        morphologyEx(frameNegMask, frameNegMask, MORPH_OPEN, structElem);
            
           vector<vector<Point>> contours_1;

            findContours(frameNegMask, contours_1, cv::RETR_LIST, cv::CHAIN_APPROX_TC89_KCOS);

            for(int i = 0; i < contours_1.size();i++){
                  approxPolyDP(contours_1.at(i),contours_1.at(i),2,true);
                 // drawContours(dstMat,contours_1,i,{0,0,255,255});
                 // auto txtpos = contours_1.at(i).at(0);
				  //putText(dstMat, to_string(contours_1.at(i).size()), txtpos, cv::FONT_HERSHEY_PLAIN, 2, {0, 0, 255, 255});

                  
                  
            }
            if(contours_1.size()!=0) {
                Rect r = boundingRect(contours_1.at(0));
                int pom = 1;
                if(r.x < 125 && r.y<150) {
                    pom = 2;
                }
                if(r.x > 125 && r.y<150) {
                    pom = 1;
                }
                if(r.x > 125 && r.y>150) {
                    pom = 0;
                }
                if(r.x < 125 && r.y>150) {
                    pom = 3;
                }
                for(int k = 0; k < pom; k ++)
                rotate(dstMat,dstMat,ROTATE_90_CLOCKWISE);
                
                imwrite("skan.jpg",dstMat);
            }
            
           
            
            imshow("Okno SKAN z KOLOREM", frameNegMask);

            imshow("SKAN", dstMat);
            
            
         }
          imshow("Okno", frame); 
       
      
    }
  
     
	return 0;
}
