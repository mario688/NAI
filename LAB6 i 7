#include <iostream>
#include <iomanip>
#include <string>
#include <map>
#include <random>
#include <cmath>
#include <numeric>
#include <algorithm>

using namespace std;
random_device r;
default_random_engine e1(r());

auto hill_climbing_r_alg = [](auto get_random_sol, auto get_all_neighbours, auto goal, int max_iterations) {
    auto current_solution = get_random_sol();
    for (int iteration = 0; iteration < max_iterations; iteration++)
    {
        auto next_solutions = get_all_neighbours(current_solution);
        uniform_int_distribution<int> uniform_dist(0, next_solutions.size()-1);
        auto next_sol = next_solutions.at(uniform_dist(e1));
        if (goal(current_solution) > goal(next_sol)) {
            current_solution = next_sol;
        }
        
        
    }
    return current_solution;
};

int main(int argc, char** argv)
{  

   int dl = atoi(argv[1]);
   int dr = atoi(argv[2]);
    auto sphere_f = [](vector<double> x) {
        double sum = 0;
        for (auto e : x)
        {
            sum += e * e;
        }
        return sum;
    };

    auto himmelblau = [](vector<double> d) {
        double x = d.at(0);
        double y = d.at(1);
        return pow(x * x + y - 11, 2.0) + pow(x + y * y - 7, 2);
    };
   
    auto beale = [](vector<double> d) {
        double x = d.at(0);
        double y = d.at(1);
        return pow(1.5-x+x*y,2.0)+ pow(2.25-x+x*pow(y,2),2)+pow(2.625-x+x*pow(y,3),2);

    };
    auto booth = [](vector<double> d) {
        double x = d.at(0);
        double y = d.at(1);
        return pow(x+2*y-7,2)+pow(2*x+y-5,2);

    };
    auto matyas = [](vector<double> d) {
        double x = d.at(0);
        double y = d.at(1);
        return 0.26*(pow(x,2)+pow(y,2))-0.48*x*y;

    };

  
    
    auto optimize = [](auto function,int x,int y){
        int max_iterations = 1000;
        uniform_real_distribution<double> uniform_dist(-5,5);
        auto neighbours = [](vector<double> x, double dx = 0.001) {
        vector<vector<double>> ret;
        for (int i = 0; i < x.size(); i++)
        {
            auto nx = x;
            nx[i] += dx;
            ret.push_back(nx);
            nx[i] -= 2.0 * dx;
            ret.push_back(nx);
        }
        return ret;
    };
         auto init = [&uniform_dist]() {
        vector<double> x(2);
        x[0] = uniform_dist(e1);
        x[1] = uniform_dist(e1);
        return x;
    };

       auto solution = hill_climbing_r_alg(
       init,
       neighbours,
       function,
       max_iterations);

   cout << "results: [ ";
   for (auto e : solution)
     cout << e << " ";
    cout << "] -> " << function(solution) << endl;

    };

    //beale -4.5 <= x,y <= 4.5
    //booth -10 <= x,y <= 10
    //matyas -10 <= x,y <= 10

        cout<<"matyas: "<<endl;
        optimize(matyas,dl,dr);
        cout<<"booth: "<<endl;
        optimize(booth,dl,dr);
        cout<<"beale: "<<endl;
        optimize(beale,dl,dr);
    
    



}
